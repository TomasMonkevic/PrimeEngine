R"( $version 330 core/$

$vertex

layout (location = 0) in vec3 position;
layout (location = 1) in vec4 color; //probably not needed in 3d, because color is set with uniform
layout (location = 2) in vec3 normal;
layout (location = 3) in vec2 uv;

uniform mat4 pr_matrix;
uniform mat4 view_matrix = mat4(1.0f);
uniform mat4 model_matrix = mat4(1.0f);

out data
{
	vec4 color;
	vec3 normal;
	vec3 position;
	vec2 uv;
} dataOut;

void main()
{
	gl_Position = pr_matrix * view_matrix * model_matrix * vec4(position, 1.0f);
	dataOut.color = color;
	dataOut.uv = uv;
	dataOut.normal = mat3(transpose(inverse(model_matrix))) * normal;
	dataOut.position = vec3(model_matrix * vec4(position, 1.0f)).xyz;
}/$

$fragment

struct Light
{
	vec3 position;
	vec4 color;
	float intensity;
	float range;
};

struct AmbientLight
{
	vec4 color;
	float intensity;
};

in data
{
	vec4 color;
	vec3 normal;
	vec3 position;
	vec2 uv;
} dataIn;

layout (location = 0) out vec4 color;

//TODO add default values to uniforms
uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;
uniform vec4 diffuseColor;
uniform float smoothness;

uniform Light light;
uniform vec3 viewPosition; //TODO change to view direction

void main()
{
	//Ambient light
	AmbientLight al; //TODO only temp
	al.color = vec4(1.0f);
	//al.color = vec4(0.0f, 1.0f, 0.0f, 1.0f);
	al.intensity = 0.25f;

	vec4 ambient = (al.intensity * mix(al.color,vec4(1.0f), 0.0f)) * texture(diffuseTexture, dataIn.uv);
	ambient.w = 1.0f;

	//Diffuse light
	vec3 norm = normalize(dataIn.normal);
	vec3 lightDir = normalize(light.position - dataIn.position);
	vec4 diffuse = max(dot(norm, lightDir), 0.0f) * mix(light.color,vec4(1.0f), 0.5f) * texture(diffuseTexture, dataIn.uv);
	diffuse.w = 1.0f;

	//Specular light
	vec3 viewDir = normalize(viewPosition - dataIn.position);
	vec3 lightReflection = normalize(reflect(-lightDir, norm));
	float spec = pow(max(dot(lightReflection, viewDir), 0.0f), smoothness);
	vec4 specular = spec * 0.7 * mix(light.color,vec4(1.0f), 0.5f) * texture(specularTexture, dataIn.uv);
	specular.w = 1.0f;

	float distance = min(length(light.position - dataIn.position), light.range) / light.range;
	float attenuation = 1.0f/(1.0f + 25.0f * distance * distance);
	diffuse.xyz *= attenuation;
	specular.xyz *= attenuation;

	color = (ambient + diffuse + specular) * diffuseColor;
	//color = texture(diffuseTexture, dataIn.uv);
	//color = vec4(abs(dataIn.normal.x), abs(dataIn.normal.y), abs(dataIn.normal.z), 1.0f);
}
/$ )"