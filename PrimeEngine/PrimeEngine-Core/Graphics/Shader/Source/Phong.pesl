R"( $version 330 core/$

$vertex

layout (location = 0) in vec4 position;
layout (location = 1) in vec4 color;
layout (location = 2) in vec3 normal;

uniform mat4 pr_matrix;
uniform mat4 view_matrix = mat4(1.0f);
uniform mat4 model_matrix = mat4(1.0f);

out data
{
	vec4 color;
	vec3 normal;
	vec3 position;
} dataOut;

void main()
{
	gl_Position = pr_matrix * view_matrix * model_matrix * position;
	dataOut.color = color;
	dataOut.normal = mat3(transpose(inverse(model_matrix))) * normal;
	dataOut.position = vec3(model_matrix * position).xyz;
}/$

$fragment

struct Light
{
	vec3 position;
	vec4 color;
	float intensity;
};

in data
{
	vec4 color;
	vec3 normal;
	vec3 position;
} dataIn;

layout (location = 0) out vec4 color;

uniform Light light;

void main()
{
	//Ambient light
	vec4 ambient = (light.intensity * light.color);
	ambient.w = 1.0f;

	//Diffuse light
	vec3 norm = normalize(dataIn.normal);
	vec3 lightDir = normalize(light.position - dataIn.position);
	vec4 diffuse = max(dot(norm, lightDir), 0.0f) * light.color;
	diffuse.w = 1.0f;

	//Specular light

	color = (ambient + diffuse) * dataIn.color;
	//color = vec4(abs(dataIn.normal.x), abs(dataIn.normal.y), abs(dataIn.normal.z), 1.0f);
}
/$ )"